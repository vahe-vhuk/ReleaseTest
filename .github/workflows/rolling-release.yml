name: Rolling release (latest assets)

on:
  push:
    paths:
      - "dist/**"
  workflow_dispatch:

concurrency:
  group: rolling-release
  cancel-in-progress: false

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Build stage and manifest
        shell: python
        run: |
          import os, json, hashlib, time, pathlib, shutil
          root = pathlib.Path("dist")
          stage = pathlib.Path("_stage"); stage.mkdir(exist_ok=True)
          if not root.exists():
            raise SystemExit("dist/ folder not found or empty")

          files = []
          for p in root.rglob("*"):
            if p.is_file():
              target = str(p.relative_to(root)).replace("\\","/")
              with open(p, "rb") as f:
                sha = hashlib.sha256(f.read()).hexdigest()
              asset_name = target.replace("/", "__")
              shutil.copy2(p, stage / asset_name)
              files.append({
                "asset_name": asset_name,
                "target": target,
                "sha256": sha,
                "size": p.stat().st_size
              })

          manifest = {
            "generated_at": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()),
            "files": files
          }
          pathlib.Path("manifest.json").write_text(json.dumps(manifest, indent=2), encoding="utf-8")
          print(f"Prepared {len(files)} asset(s).")

      - name: Upload manifest.json
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: rolling
          release_name: Rolling
          file: manifest.json
          overwrite: true

      - name: Upload staged assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: rolling
          release_name: Rolling
          file: _stage/*
          file_glob: true
          overwrite: true

      # ðŸ‘‰ Add this step right after uploads
      - name: Prune orphaned assets (remove files no longer in dist/)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const manifest = JSON.parse(fs.readFileSync('manifest.json','utf8'));
            const expected = new Set(['manifest.json', ...manifest.files.map(f => f.asset_name)]);
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            const rel = await github.rest.repos.getReleaseByTag({ owner, repo, tag: 'rolling' });
            const release_id = rel.data.id;

            let page = 1, per_page = 100, assets = [];
            while (true) {
              const { data } = await github.rest.repos.listReleaseAssets({ owner, repo, release_id, per_page, page });
              assets.push(...data);
              if (data.length < per_page) break;
              page++;
            }

            for (const a of assets) {
              if (!expected.has(a.name)) {
                core.info(`Deleting orphan asset: ${a.name}`);
                await github.rest.repos.deleteReleaseAsset({ owner, repo, asset_id: a.id });
              }
            }
